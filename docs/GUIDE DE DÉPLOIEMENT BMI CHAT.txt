================================================================================
                        GUIDE DE D√âPLOIEMENT BMI CHAT
================================================================================

üìã ARCHITECTURE
- Backend: FastAPI (Python) sur port 3006
- Frontend: React (TypeScript) sur port 8095
- Base de donn√©es: SQLite + ChromaDB (vecteurs)
- Proxy: Nginx pour le routage et SSL
- Conteneurisation: Docker Compose

üê≥ DOCKER COMPOSE (docker-compose.yml)
================================================================================
version: '3.8'
services:
  backend:
    build:
      context: .
      dockerfile: deployment/docker/Dockerfile.backend
    container_name: bmi-chat-backend
    ports:
      - "3006:3006"
    volumes:
      - ./data:/app/data
      - ./logs:/app/logs
    environment:
      - ENVIRONMENT=production
    env_file:
      - .env
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3006/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  frontend:
    build:
      context: ./frontend
      dockerfile: ../deployment/docker/Dockerfile.frontend
    container_name: bmi-chat-frontend
    ports:
      - "8095:80"
    depends_on:
      - backend
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80"]
      interval: 30s
      timeout: 10s
      retries: 3

üê≥ DOCKERFILE BACKEND (deployment/docker/Dockerfile.backend)
================================================================================
FROM python:3.11-slim

# Cr√©er l'utilisateur non-root
RUN useradd --create-home --shell /bin/bash appuser

# Installer les d√©pendances syst√®me
RUN apt-get update && apt-get install -y \
    curl \
    && rm -rf /var/lib/apt/lists/*

# D√©finir le r√©pertoire de travail
WORKDIR /app

# Copier les fichiers de d√©pendances
COPY pyproject.toml poetry.lock ./

# Installer Poetry et les d√©pendances
RUN pip install poetry && \
    poetry config virtualenvs.create false && \
    poetry install --no-dev

# Copier le code source
COPY app/ ./app/
COPY deployment/ ./deployment/

# Cr√©er les r√©pertoires n√©cessaires
RUN mkdir -p /app/data /app/logs && \
    chown -R appuser:appuser /app

# Changer vers l'utilisateur non-root
USER appuser

# Exposer le port
EXPOSE 3006

# Commande de d√©marrage
CMD ["python", "-m", "uvicorn", "app.main:app", "--host", "0.0.0.0", "--port", "3006"]

üê≥ DOCKERFILE FRONTEND (deployment/docker/Dockerfile.frontend)
================================================================================
FROM node:18-alpine AS builder

WORKDIR /app
COPY package*.json ./
RUN npm ci --only=production

COPY . .
RUN npm run build

FROM nginx:alpine
COPY --from=builder /app/dist /usr/share/nginx/html
COPY deployment/docker/nginx/conf.d/default.conf /etc/nginx/conf.d/default.conf

EXPOSE 80
CMD ["nginx", "-g", "daemon off;"]

üåê CONFIGURATION NGINX (/etc/nginx/sites-available/bmi.engage-360.net)
================================================================================
# BMI Chat Configuration avec SSL
server {
    listen 80;
    server_name bmi.engage-360.net www.bmi.engage-360.net;
    return 301 https://$server_name$request_uri;
}

server {
    listen 443 ssl http2;
    server_name bmi.engage-360.net www.bmi.engage-360.net;

    # Configuration SSL
    ssl_certificate /etc/letsencrypt/live/bmi.engage-360.net/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/bmi.engage-360.net/privkey.pem;
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers ECDHE-RSA-AES256-GCM-SHA512:DHE-RSA-AES256-GCM-SHA512:ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES256-GCM-SHA384;
    ssl_prefer_server_ciphers off;

    # Headers de s√©curit√©
    add_header X-Frame-Options DENY;
    add_header X-Content-Type-Options nosniff;
    add_header X-XSS-Protection "1; mode=block";
    add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;

    # Frontend (React app)
    location / {
        proxy_pass http://localhost:8095;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_connect_timeout 60s;
        proxy_send_timeout 60s;
        proxy_read_timeout 60s;
    }

    # Backend API
    location /api/ {
        proxy_pass http://localhost:3006;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_connect_timeout 60s;
        proxy_send_timeout 60s;
        proxy_read_timeout 60s;

        # Headers CORS
        add_header Access-Control-Allow-Origin "https://bmi.engage-360.net" always;
        add_header Access-Control-Allow-Methods "GET, POST, PUT, DELETE, OPTIONS" always;
        add_header Access-Control-Allow-Headers "Content-Type, Authorization" always;
        add_header Access-Control-Allow-Credentials "true" always;

        # Gestion des requ√™tes preflight
        if ($request_method = 'OPTIONS') {
            add_header Access-Control-Allow-Origin "https://bmi.engage-360.net" always;
            add_header Access-Control-Allow-Methods "GET, POST, PUT, DELETE, OPTIONS" always;
            add_header Access-Control-Allow-Headers "Content-Type, Authorization" always;
            add_header Access-Control-Allow-Credentials "true" always;
            add_header Content-Type "text/plain charset=UTF-8";
            add_header Content-Length 0;
            return 204;
        }
    }

    # Health check
    location /health {
        proxy_pass http://localhost:3006/health;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        access_log off;
    }

    # Documentation API
    location /docs {
        proxy_pass http://localhost:3006/docs;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }

    # Widget statique
    location /widget/ {
        proxy_pass http://localhost:8095/widget/;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }

    # Compression Gzip
    gzip on;
    gzip_vary on;
    gzip_min_length 1024;
    gzip_proxied any;
    gzip_comp_level 6;
    gzip_types text/plain text/css text/xml text/javascript application/json application/javascript application/xml+rss application/atom+xml image/svg+xml;
}

üîß VARIABLES D'ENVIRONNEMENT (.env)
================================================================================
# Configuration de base
ENVIRONMENT=production
DEBUG=false
LOG_LEVEL=INFO

# Base de donn√©es
DATABASE_URL=sqlite:///./data/bmi_chat.db

# API Keys
OPENAI_API_KEY=your_openai_api_key_here

# Configuration CORS
CORS_ORIGINS=["https://bmi.engage-360.net","https://www.bmi.engage-360.net"]

# Configuration ChromaDB
CHROMA_PERSIST_DIRECTORY=/app/data/vectors
CHROMA_COLLECTION_NAME=bmi_documents

# Configuration des embeddings
EMBEDDING_MODEL=text-embedding-3-small
EMBEDDING_DIMENSION=1536

# Configuration du chat
CHAT_MODEL=gpt-4o
MAX_TOKENS=4000
TEMPERATURE=0.7

# Configuration de recherche
MIN_RELEVANCE_SCORE=0.3
MAX_CHUNKS_PER_QUERY=5
USE_RERANKING=true

# Configuration des logs
LOG_FILE=/app/logs/bmi_chat.log
LOG_FORMAT=json

üîß VARIABLES FRONTEND (.env.production)
================================================================================
VITE_API_URL=https://bmi.engage-360.net
VITE_WS_URL=wss://bmi.engage-360.net/ws

üöÄ SCRIPT DE D√âPLOIEMENT RAPIDE (quick-deploy.sh)
================================================================================
#!/bin/bash

# Script de D√©ploiement Rapide - BMI Chat
# Usage: ./quick-deploy.sh [update|fresh|backup]

set -e  # Arr√™ter en cas d'erreur

# Couleurs pour les messages
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Fonctions utilitaires
log_info() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

log_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

log_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

log_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# V√©rifier les pr√©requis
check_prerequisites() {
    log_info "V√©rification des pr√©requis..."
    
    if ! command -v docker &> /dev/null; then
        log_error "Docker n'est pas install√©"
        exit 1
    fi
    
    if ! command -v docker-compose &> /dev/null; then
        log_error "Docker Compose n'est pas install√©"
        exit 1
    fi
    
    if ! command -v curl &> /dev/null; then
        log_error "curl n'est pas install√©"
        exit 1
    fi
    
    log_success "Tous les pr√©requis sont satisfaits"
}

# Sauvegarder les donn√©es
backup_data() {
    log_info "Sauvegarde des donn√©es..."
    
    BACKUP_DIR="backup_$(date +%Y%m%d_%H%M%S)"
    mkdir -p "$BACKUP_DIR"
    
    # Sauvegarder la base de donn√©es
    if [ -f "data/bmi_chat.db" ]; then
        cp data/bmi_chat.db "$BACKUP_DIR/"
        log_success "Base de donn√©es sauvegard√©e"
    fi
    
    # Sauvegarder les vecteurs
    if [ -d "data/vectors" ]; then
        tar -czf "$BACKUP_DIR/vectors.tar.gz" data/vectors/
        log_success "Vecteurs sauvegard√©s"
    fi
    
    # Sauvegarder les logs
    if [ -d "logs" ]; then
        tar -czf "$BACKUP_DIR/logs.tar.gz" logs/
        log_success "Logs sauvegard√©s"
    fi
    
    log_success "Sauvegarde termin√©e dans $BACKUP_DIR"
}

# Arr√™ter les services
stop_services() {
    log_info "Arr√™t des services..."
    docker-compose down
    log_success "Services arr√™t√©s"
}

# Reconstruire les images
build_images() {
    log_info "Reconstruction des images Docker..."
    docker-compose build --no-cache
    log_success "Images reconstruites"
}

# D√©marrer les services
start_services() {
    log_info "D√©marrage des services..."
    docker-compose up -d
    log_success "Services d√©marr√©s"
}

# Attendre que les services soient pr√™ts
wait_for_services() {
    log_info "Attente du d√©marrage des services..."
    
    local max_attempts=30
    local attempt=1
    
    while [ $attempt -le $max_attempts ]; do
        if curl -f http://localhost:3006/health > /dev/null 2>&1; then
            log_success "Backend en ligne"
            break
        fi
        
        if [ $attempt -eq $max_attempts ]; then
            log_error "Backend ne r√©pond pas apr√®s $max_attempts tentatives"
            return 1
        fi
        
        log_info "Tentative $attempt/$max_attempts - Attente..."
        sleep 10
        ((attempt++))
    done
    
    attempt=1
    while [ $attempt -le $max_attempts ]; do
        if curl -f http://localhost:8095 > /dev/null 2>&1; then
            log_success "Frontend en ligne"
            break
        fi
        
        if [ $attempt -eq $max_attempts ]; then
            log_error "Frontend ne r√©pond pas apr√®s $max_attempts tentatives"
            return 1
        fi
        
        log_info "Tentative $attempt/$max_attempts - Attente..."
        sleep 10
        ((attempt++))
    done
}

# V√©rifier la sant√© des services
check_health() {
    log_info "V√©rification de la sant√© des services..."
    
    # V√©rifier le backend
    if curl -f http://localhost:3006/health > /dev/null 2>&1; then
        log_success "‚úÖ Backend en ligne"
    else
        log_error "‚ùå Backend hors ligne"
        return 1
    fi
    
    # V√©rifier le frontend
    if curl -f http://localhost:8095 > /dev/null 2>&1; then
        log_success "‚úÖ Frontend en ligne"
    else
        log_error "‚ùå Frontend hors ligne"
        return 1
    fi
    
    # V√©rifier l'API publique
    if curl -f https://bmi.engage-360.net/health > /dev/null 2>&1; then
        log_success "‚úÖ API publique accessible"
    else
        log_warning "‚ö†Ô∏è API publique non accessible (peut √™tre normal pendant le d√©marrage)"
    fi
}

# Tester la recherche
test_search() {
    log_info "Test de la recherche..."
    
    local response=$(curl -s -X POST "https://bmi.engage-360.net/api/search/semantic" \
        -H "Content-Type: application/json" \
        -d '{"query": "BMI", "k": 5, "min_score": 0.0}' 2>/dev/null || echo '{"error": "request failed"}')
    
    if echo "$response" | grep -q "results"; then
        log_success "‚úÖ Recherche fonctionnelle"
        echo "R√©ponse: $response" | jq '.' 2>/dev/null || echo "$response"
    else
        log_warning "‚ö†Ô∏è Recherche non fonctionnelle: $response"
    fi
}

# Nettoyer les ressources Docker
cleanup_docker() {
    log_info "Nettoyage des ressources Docker..."
    
    # Nettoyer les images non utilis√©es
    docker image prune -f
    
    # Nettoyer les conteneurs arr√™t√©s
    docker container prune -f
    
    # Nettoyer les volumes non utilis√©s
    docker volume prune -f
    
    log_success "Nettoyage termin√©"
}

# Fonction principale
main() {
    local mode=${1:-"update"}
    
    echo "üöÄ D√©ploiement BMI Chat - Mode: $mode"
    echo "========================================"
    
    # V√©rifier les pr√©requis
    check_prerequisites
    
    # Sauvegarder si demand√©
    if [ "$mode" = "backup" ]; then
        backup_data
        exit 0
    fi
    
    # Sauvegarder avant mise √† jour
    if [ "$mode" = "update" ]; then
        backup_data
    fi
    
    # Arr√™ter les services
    stop_services
    
    # Reconstruire les images
    build_images
    
    # D√©marrer les services
    start_services
    
    # Attendre que les services soient pr√™ts
    if ! wait_for_services; then
        log_error "√âchec du d√©marrage des services"
        exit 1
    fi
    
    # V√©rifier la sant√©
    if ! check_health; then
        log_error "√âchec de la v√©rification de sant√©"
        exit 1
    fi
    
    # Tester la recherche
    test_search
    
    # Nettoyer (optionnel)
    if [ "$mode" = "fresh" ]; then
        cleanup_docker
    fi
    
    log_success "üéâ D√©ploiement termin√© avec succ√®s!"
    echo ""
    echo "üìã R√©sum√©:"
    echo "  - Backend: http://localhost:3006"
    echo "  - Frontend: http://localhost:8095"
    echo "  - API Publique: https://bmi.engage-360.net"
    echo "  - Documentation: https://bmi.engage-360.net/docs"
    echo ""
    echo "üîç Commandes utiles:"
    echo "  - Logs backend: docker-compose logs -f backend"
    echo "  - Logs frontend: docker-compose logs -f frontend"
    echo "  - √âtat services: docker-compose ps"
    echo "  - Test recherche: curl -X POST https://bmi.engage-360.net/api/search/semantic -H 'Content-Type: application/json' -d '{\"query\": \"test\"}'"
}

# Gestion des arguments
case "${1:-update}" in
    "update")
        main "update"
        ;;
    "fresh")
        main "fresh"
        ;;
    "backup")
        main "backup"
        ;;
    *)
        echo "Usage: $0 [update|fresh|backup]"
        echo "  update: Mise √† jour avec sauvegarde (d√©faut)"
        echo "  fresh: D√©ploiement propre avec nettoyage"
        echo "  backup: Sauvegarde uniquement"
        exit 1
        ;;
esac

üìä API ENDPOINTS
================================================================================
| Endpoint | M√©thode | Description |
|----------|---------|-------------|
| /health | GET | V√©rification de sant√© |
| /api/search/semantic | POST | Recherche s√©mantique |
| /api/search/direct | POST | Recherche directe |
| /api/documents | GET | Liste des documents |
| /api/documents | POST | Ajouter un document |
| /api/chat | POST | Chat avec l'IA |
| /docs | GET | Documentation API |

Exemple de requ√™te de recherche:
curl -X POST "https://bmi.engage-360.net/api/search/semantic" \
  -H "Content-Type: application/json" \
  -d '{
    "query": "BMI-WFS",
    "k": 5,
    "min_score": 0.0
  }'

üîç COMMANDES UTILES
================================================================================
# V√©rifier l'√©tat des conteneurs
docker-compose ps

# Voir les logs du backend
docker-compose logs -f backend

# Voir les logs du frontend
docker-compose logs -f frontend

# Acc√©der au shell du backend
docker exec -it bmi-chat-backend bash

# V√©rifier la sant√© des services
curl http://localhost:3006/health
curl http://localhost:8095

# V√©rifier la configuration Nginx
sudo nginx -t
sudo systemctl reload nginx

# Voir les logs Nginx
sudo tail -f /var/log/nginx/error.log
sudo tail -f /var/log/nginx/access.log

# Debug de la recherche
curl -X POST "https://bmi.engage-360.net/api/search/semantic" \
  -H "Content-Type: application/json" \
  -d '{"query": "test", "k": 5, "min_score": 0.0}' | jq '.'

# Debug de ChromaDB
docker exec bmi-chat-backend python -c "
from app.services.vector_service import VectorService
vs = VectorService()
results = vs.search_similar_chunks('test', k=5)
print(f'Found {len(results.get(\"chunks\", []))} chunks')
"

üîß MAINTENANCE
================================================================================
# Sauvegarder la base de donn√©es
cp data/bmi_chat.db data/bmi_chat_backup_$(date +%Y%m%d_%H%M%S).db

# Sauvegarder les vecteurs
tar -czf data/vectors_backup_$(date +%Y%m%d_%H%M%S).tar.gz data/vectors/

# Sauvegarder les logs
tar -czf logs_backup_$(date +%Y%m%d_%H%M%S).tar.gz logs/

# Nettoyer les images Docker non utilis√©es
docker image prune -f

# Nettoyer les conteneurs arr√™t√©s
docker container prune -f

# Nettoyer les volumes non utilis√©s
docker volume prune -f

üö® D√âPANNAGE
================================================================================
1. 502 Bad Gateway
   - V√©rifier que les conteneurs sont en cours d'ex√©cution
   - V√©rifier la configuration Nginx
   - V√©rifier les logs Nginx

2. CORS Errors
   - V√©rifier la configuration CORS dans le backend
   - V√©rifier les headers dans Nginx

3. ChromaDB Errors
   - V√©rifier les permissions sur /app/data/vectors
   - Red√©marrer le backend
   - Recr√©er la base de vecteurs si n√©cessaire

4. Search Returns 0 Results
   - V√©rifier que les documents sont index√©s
   - V√©rifier les scores de similarit√©
   - Ajuster min_relevance_score

Scripts de r√©paration:
# R√©parer ChromaDB
docker exec bmi-chat-backend rm -rf /app/data/vectors
docker-compose restart backend

# R√©parer Nginx
sudo nginx -t && sudo systemctl reload nginx

# R√©parer les permissions
sudo chown -R 1000:1000 data/ logs/

üìù NOTES IMPORTANTES
================================================================================
1. Ports Utilis√©s:
   - 3006: Backend API
   - 8095: Frontend React
   - 80/443: Nginx (HTTP/HTTPS)

2. Volumes Docker:
   - ./data: Base de donn√©es et vecteurs
   - ./logs: Fichiers de logs

3. S√©curit√©:
   - Utilisateur non-root dans les conteneurs
   - SSL/TLS obligatoire
   - Headers de s√©curit√© configur√©s

4. Performance:
   - Compression Gzip activ√©e
   - Cache Nginx configur√©
   - Health checks activ√©s

üöÄ D√âPLOIEMENT RAPIDE
================================================================================
# Rendre le script ex√©cutable
chmod +x quick-deploy.sh

# Mise √† jour avec sauvegarde automatique
./quick-deploy.sh update

# D√©ploiement propre (reconstruction compl√®te)
./quick-deploy.sh fresh

# Sauvegarde uniquement
./quick-deploy.sh backup

================================================================================
                        FIN DU GUIDE
================================================================================