# Commandes Ã  exÃ©cuter sur le serveur (147.93.44.169) - NOUVEAU REPO

# 1. Nettoyer et prÃ©parer
cd /var/www/bmichat
rm -rf *
git clone https://github.com/bkourouma/bmichatv2.git .
git checkout clean-main

# 2. CrÃ©er la configuration
mkdir -p data/sqlite data/uploads data/vectors logs

# CrÃ©er le fichier .env
cat > .env << 'EOF'
ENVIRONMENT=production
DEBUG=false
LOG_LEVEL=INFO
API_HOST=0.0.0.0
API_PORT=3006
API_WORKERS=4
CORS_ORIGINS=["https://bmi-engage-360.net","http://bmi-engage-360.net","http://147.93.44.169:3003"]
OPENAI_API_KEY=your_openai_api_key_here
OPENAI_MODEL=gpt-4o
OPENAI_TEMPERATURE=0.0
OPENAI_MAX_TOKENS=4000
DATABASE_URL=sqlite:///data/sqlite/bmi_chat.db
VECTOR_DB_PATH=data/vectors
UPLOAD_DIR=data/uploads
SECRET_KEY=$(openssl rand -hex 32)
CHUNK_SIZE=4000
CHUNK_OVERLAP=800
MAX_CHUNKS_PER_DOCUMENT=100
MAX_CHAT_HISTORY=10
DEFAULT_RETRIEVAL_K=5
MAX_RETRIEVAL_K=10
CHAT_TIMEOUT_SECONDS=30
LOG_FILE=logs/app.log
LOG_MAX_SIZE=10MB
LOG_BACKUP_COUNT=5
MAX_UPLOAD_SIZE=50MB
RATE_LIMIT_PER_MINUTE=60
CACHE_TTL_SECONDS=300
EOF

# 3. Configurer Nginx
mkdir -p deployment/nginx/conf.d

cat > deployment/nginx/conf.d/bmi-engage-360.net.conf << 'EOF'
server {
    listen 80;
    server_name bmi-engage-360.net;
    return 301 https://$server_name$request_uri;
}

server {
    listen 443 ssl http2;
    server_name bmi-engage-360.net;
    ssl_certificate /etc/letsencrypt/live/bmi-engage-360.net/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/bmi-engage-360.net/privkey.pem;
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers ECDHE-RSA-AES256-GCM-SHA512:DHE-RSA-AES256-GCM-SHA512:ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES256-GCM-SHA384;
    ssl_prefer_server_ciphers off;
    add_header X-Frame-Options DENY;
    add_header X-Content-Type-Options nosniff;
    add_header X-XSS-Protection "1; mode=block";
    add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;
    location / {
        proxy_pass http://frontend:3003;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }
    location /api/ {
        proxy_pass http://backend:3006;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_connect_timeout 60s;
        proxy_send_timeout 60s;
        proxy_read_timeout 60s;
    }
    location /health {
        proxy_pass http://backend:3006/health;
        access_log off;
    }
    location /widget/ {
        proxy_pass http://frontend:3003/widget/;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }
    gzip on;
    gzip_vary on;
    gzip_min_length 1024;
    gzip_proxied any;
    gzip_comp_level 6;
    gzip_types text/plain text/css text/xml text/javascript application/json application/javascript application/xml+rss application/atom+xml image/svg+xml;
}
EOF

# 4. DÃ©ployer avec Docker
chmod +x deploy-vps.sh
./deploy-vps.sh install
./deploy-vps.sh deploy

# 5. Configurer le pare-feu
apt install -y ufw
ufw default deny incoming
ufw default allow outgoing
ufw allow ssh
ufw allow 80/tcp
ufw allow 443/tcp
ufw allow 3003/tcp
ufw allow 3006/tcp
ufw --force enable

# 6. Tester les services
sleep 30
curl -f http://localhost:3006/health
curl -f http://localhost:3003

echo "ðŸŽ‰ DÃ‰PLOIEMENT TERMINÃ‰ !"
echo "ðŸ“‹ INTERVENTIONS MANUELLES :"
echo "1. nano .env  # Configurer la clÃ© OpenAI"
echo "2. certbot --nginx -d bmi-engage-360.net  # SSL"
echo "3. Pointer le domaine dans votre DNS" 