# Commandes à exécuter sur le serveur (147.93.44.169)

# 1. Créer le script de déploiement
cat > /var/www/bmichat/auto-deploy.sh << 'EOF'
#!/bin/bash

# 🚀 Script de Déploiement Automatisé BMI Chat
# Usage: ./auto-deploy.sh

set -e

# Configuration
PROJECT_DIR="/var/www/bmichat"
DOMAIN="bmi-engage-360.net"
EMAIL="admin@engage-360.net"
IP="147.93.44.169"

# Couleurs
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

log_info() { echo -e "${BLUE}[INFO]${NC} $1"; }
log_success() { echo -e "${GREEN}[SUCCESS]${NC} $1"; }
log_warning() { echo -e "${YELLOW}[WARNING]${NC} $1"; }
log_error() { echo -e "${RED}[ERROR]${NC} $1"; }

echo "🚀 Déploiement Automatisé BMI Chat"
echo "=================================="

# Étape 1: Nettoyage complet
log_info "Étape 1: Nettoyage complet du serveur..."
docker stop $(docker ps -aq) 2>/dev/null || true
docker rm $(docker ps -aq) 2>/dev/null || true
docker volume prune -f
docker system prune -af
rm -rf $PROJECT_DIR/*
mkdir -p $PROJECT_DIR
cd $PROJECT_DIR
log_success "Nettoyage terminé"

# Étape 2: Installation Docker
log_info "Étape 2: Installation de Docker..."
apt update -y
apt install -y curl wget git unzip software-properties-common apt-transport-https ca-certificates gnupg lsb-release

curl -fsSL https://download.docker.com/linux/ubuntu/gpg | gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg
echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable" | tee /etc/apt/sources.list.d/docker.list > /dev/null
apt update
apt install -y docker-ce docker-ce-cli containerd.io docker-compose-plugin

curl -L "https://github.com/docker/compose/releases/download/v2.20.0/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
chmod +x /usr/local/bin/docker-compose

systemctl start docker
systemctl enable docker
usermod -aG docker $USER
log_success "Docker installé"

# Étape 3: Clonage du repository
log_info "Étape 3: Clonage du repository GitHub..."
git clone https://github.com/bkourouma/bmichat.git .
log_success "Repository cloné"

# Étape 4: Configuration automatique
log_info "Étape 4: Configuration automatique..."
mkdir -p data/sqlite data/uploads data/vectors logs

# Créer le fichier .env automatiquement
cat > .env << 'ENVEOF'
# =============================================================================
# Application Configuration
# =============================================================================
ENVIRONMENT=production
DEBUG=false
LOG_LEVEL=INFO

# =============================================================================
# API Configuration
# =============================================================================
API_HOST=0.0.0.0
API_PORT=3006
API_WORKERS=4
CORS_ORIGINS=["https://bmi-engage-360.net","http://bmi-engage-360.net","http://147.93.44.169:3003"]

# =============================================================================
# OpenAI Configuration
# =============================================================================
OPENAI_API_KEY=your_openai_api_key_here
OPENAI_MODEL=gpt-4o
OPENAI_TEMPERATURE=0.0
OPENAI_MAX_TOKENS=4000

# =============================================================================
# Database Configuration
# =============================================================================
DATABASE_URL=sqlite:///data/sqlite/bmi_chat.db
VECTOR_DB_PATH=data/vectors
UPLOAD_DIR=data/uploads

# =============================================================================
# Security
# =============================================================================
SECRET_KEY=$(openssl rand -hex 32)

# =============================================================================
# Document Processing
# =============================================================================
CHUNK_SIZE=4000
CHUNK_OVERLAP=800
MAX_CHUNKS_PER_DOCUMENT=100

# =============================================================================
# Chat Configuration
# =============================================================================
MAX_CHAT_HISTORY=10
DEFAULT_RETRIEVAL_K=5
MAX_RETRIEVAL_K=10
CHAT_TIMEOUT_SECONDS=30

# =============================================================================
# Logging
# =============================================================================
LOG_FILE=logs/app.log
LOG_MAX_SIZE=10MB
LOG_BACKUP_COUNT=5

# =============================================================================
# Performance
# =============================================================================
MAX_UPLOAD_SIZE=50MB
RATE_LIMIT_PER_MINUTE=60
CACHE_TTL_SECONDS=300
ENVEOF

log_success "Configuration créée"

# Étape 5: Configuration Nginx
log_info "Étape 5: Configuration Nginx..."
mkdir -p deployment/nginx/conf.d

cat > deployment/nginx/conf.d/bmi-engage-360.net.conf << 'NGINXEOF'
server {
    listen 80;
    server_name bmi-engage-360.net;
    return 301 https://$server_name$request_uri;
}

server {
    listen 443 ssl http2;
    server_name bmi-engage-360.net;

    ssl_certificate /etc/letsencrypt/live/bmi-engage-360.net/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/bmi-engage-360.net/privkey.pem;
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers ECDHE-RSA-AES256-GCM-SHA512:DHE-RSA-AES256-GCM-SHA512:ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES256-GCM-SHA384;
    ssl_prefer_server_ciphers off;

    add_header X-Frame-Options DENY;
    add_header X-Content-Type-Options nosniff;
    add_header X-XSS-Protection "1; mode=block";
    add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;

    location / {
        proxy_pass http://frontend:3003;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }

    location /api/ {
        proxy_pass http://backend:3006;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_connect_timeout 60s;
        proxy_send_timeout 60s;
        proxy_read_timeout 60s;
    }

    location /health {
        proxy_pass http://backend:3006/health;
        access_log off;
    }

    location /widget/ {
        proxy_pass http://frontend:3003/widget/;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }

    gzip on;
    gzip_vary on;
    gzip_min_length 1024;
    gzip_proxied any;
    gzip_comp_level 6;
    gzip_types text/plain text/css text/xml text/javascript application/json application/javascript application/xml+rss application/atom+xml image/svg+xml;
}
NGINXEOF

log_success "Configuration Nginx créée"

# Étape 6: Déploiement Docker
log_info "Étape 6: Déploiement Docker..."
chmod +x deploy-vps.sh
./deploy-vps.sh install
./deploy-vps.sh deploy

# Attendre que les services démarrent
sleep 30

log_success "Déploiement Docker terminé"

# Étape 7: Configuration Pare-feu
log_info "Étape 7: Configuration Pare-feu..."
apt install -y ufw
ufw default deny incoming
ufw default allow outgoing
ufw allow ssh
ufw allow 80/tcp
ufw allow 443/tcp
ufw allow 3003/tcp
ufw allow 3006/tcp
ufw --force enable
log_success "Pare-feu configuré"

# Étape 8: Script de sauvegarde
log_info "Étape 8: Configuration sauvegarde..."
cat > backup.sh << 'BACKUPEOF'
#!/bin/bash
BACKUP_DIR="/var/backups/bmichat"
DATE=$(date +%Y%m%d_%H%M%S)
mkdir -p $BACKUP_DIR
docker run --rm -v bmichat_backend_data:/data -v $BACKUP_DIR:/backup alpine tar czf /backup/data_$DATE.tar.gz -C /data .
docker run --rm -v bmichat_backend_logs:/logs -v $BACKUP_DIR:/backup alpine tar czf /backup/logs_$DATE.tar.gz -C /logs .
echo "Sauvegarde terminée: $BACKUP_DIR/data_$DATE.tar.gz"
BACKUPEOF

chmod +x backup.sh
echo "0 2 * * * /var/www/bmichat/backup.sh" | crontab -
log_success "Sauvegarde configurée"

# Étape 9: Tests automatiques
log_info "Étape 9: Tests automatiques..."
sleep 10

if curl -f http://localhost:3006/health > /dev/null 2>&1; then
    log_success "✅ Backend opérationnel"
else
    log_error "❌ Backend non opérationnel"
fi

if curl -f http://localhost:3003 > /dev/null 2>&1; then
    log_success "✅ Frontend opérationnel"
else
    log_error "❌ Frontend non opérationnel"
fi

echo ""
echo "🎉 DÉPLOIEMENT AUTOMATIQUE TERMINÉ !"
echo "====================================="
echo ""
echo "📋 INTERVENTIONS MANUELLES REQUISES :"
echo ""
echo "1. 🔑 CONFIGURER LA CLÉ OPENAI :"
echo "   nano /var/www/bmichat/.env"
echo "   # Remplacez 'your_openai_api_key_here' par votre vraie clé"
echo ""
echo "2. 🔒 CONFIGURER SSL :"
echo "   apt install -y certbot python3-certbot-nginx"
echo "   certbot --nginx -d bmi-engage-360.net --non-interactive --agree-tos --email admin@engage-360.net"
echo ""
echo "3. 🌐 POINTER LE DOMAINE :"
echo "   # Dans votre panneau DNS, pointez bmi-engage-360.net vers 147.93.44.169"
echo ""
echo "4. 🧪 TESTS FINAUX :"
echo "   curl https://bmi-engage-360.net/health"
echo "   curl -X POST https://bmi-engage-360.net/api/chat -H 'Content-Type: application/json' -d '{\"message\":\"test\"}'"
echo ""
echo "📊 COMMANDES UTILES :"
echo "   cd /var/www/bmichat"
echo "   ./deploy-vps.sh status    # Statut des services"
echo "   ./deploy-vps.sh logs      # Logs en temps réel"
echo "   ./deploy-vps.sh backup    # Sauvegarde manuelle"
echo ""
echo "🌐 ACCÈS TEMPORAIRE :"
echo "   Frontend: http://147.93.44.169:3003"
echo "   Backend: http://147.93.44.169:3006"
echo "   Health: http://147.93.44.169:3006/health"
echo ""
log_success "Script de déploiement terminé avec succès !"
EOF

# 2. Rendre le script exécutable
chmod +x /var/www/bmichat/auto-deploy.sh

# 3. Exécuter le script
cd /var/www/bmichat
./auto-deploy.sh 