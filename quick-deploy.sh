#!/bin/bash

# Script de D√©ploiement Rapide - BMI Chat
# Usage: ./quick-deploy.sh [update|fresh|backup]

set -e  # Arr√™ter en cas d'erreur

# Couleurs pour les messages
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Fonctions utilitaires
log_info() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

log_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

log_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

log_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# V√©rifier les pr√©requis
check_prerequisites() {
    log_info "V√©rification des pr√©requis..."
    
    if ! command -v docker &> /dev/null; then
        log_error "Docker n'est pas install√©"
        exit 1
    fi
    
    if ! command -v docker-compose &> /dev/null; then
        log_error "Docker Compose n'est pas install√©"
        exit 1
    fi
    
    if ! command -v curl &> /dev/null; then
        log_error "curl n'est pas install√©"
        exit 1
    fi
    
    log_success "Tous les pr√©requis sont satisfaits"
}

# Sauvegarder les donn√©es
backup_data() {
    log_info "Sauvegarde des donn√©es..."
    
    BACKUP_DIR="backup_$(date +%Y%m%d_%H%M%S)"
    mkdir -p "$BACKUP_DIR"
    
    # Sauvegarder la base de donn√©es
    if [ -f "data/bmi_chat.db" ]; then
        cp data/bmi_chat.db "$BACKUP_DIR/"
        log_success "Base de donn√©es sauvegard√©e"
    fi
    
    # Sauvegarder les vecteurs
    if [ -d "data/vectors" ]; then
        tar -czf "$BACKUP_DIR/vectors.tar.gz" data/vectors/
        log_success "Vecteurs sauvegard√©s"
    fi
    
    # Sauvegarder les logs
    if [ -d "logs" ]; then
        tar -czf "$BACKUP_DIR/logs.tar.gz" logs/
        log_success "Logs sauvegard√©s"
    fi
    
    log_success "Sauvegarde termin√©e dans $BACKUP_DIR"
}

# Arr√™ter les services
stop_services() {
    log_info "Arr√™t des services..."
    docker-compose down
    log_success "Services arr√™t√©s"
}

# Reconstruire les images
build_images() {
    log_info "Reconstruction des images Docker..."
    docker-compose build --no-cache
    log_success "Images reconstruites"
}

# D√©marrer les services
start_services() {
    log_info "D√©marrage des services..."
    docker-compose up -d
    log_success "Services d√©marr√©s"
}

# Attendre que les services soient pr√™ts
wait_for_services() {
    log_info "Attente du d√©marrage des services..."
    
    local max_attempts=30
    local attempt=1
    
    while [ $attempt -le $max_attempts ]; do
        if curl -f http://localhost:3006/health > /dev/null 2>&1; then
            log_success "Backend en ligne"
            break
        fi
        
        if [ $attempt -eq $max_attempts ]; then
            log_error "Backend ne r√©pond pas apr√®s $max_attempts tentatives"
            return 1
        fi
        
        log_info "Tentative $attempt/$max_attempts - Attente..."
        sleep 10
        ((attempt++))
    done
    
    attempt=1
    while [ $attempt -le $max_attempts ]; do
        if curl -f http://localhost:8095 > /dev/null 2>&1; then
            log_success "Frontend en ligne"
            break
        fi
        
        if [ $attempt -eq $max_attempts ]; then
            log_error "Frontend ne r√©pond pas apr√®s $max_attempts tentatives"
            return 1
        fi
        
        log_info "Tentative $attempt/$max_attempts - Attente..."
        sleep 10
        ((attempt++))
    done
}

# V√©rifier la sant√© des services
check_health() {
    log_info "V√©rification de la sant√© des services..."
    
    # V√©rifier le backend
    if curl -f http://localhost:3006/health > /dev/null 2>&1; then
        log_success "‚úÖ Backend en ligne"
    else
        log_error "‚ùå Backend hors ligne"
        return 1
    fi
    
    # V√©rifier le frontend
    if curl -f http://localhost:8095 > /dev/null 2>&1; then
        log_success "‚úÖ Frontend en ligne"
    else
        log_error "‚ùå Frontend hors ligne"
        return 1
    fi
    
    # V√©rifier l'API publique
    if curl -f https://bmi.engage-360.net/health > /dev/null 2>&1; then
        log_success "‚úÖ API publique accessible"
    else
        log_warning "‚ö†Ô∏è API publique non accessible (peut √™tre normal pendant le d√©marrage)"
    fi
}

# Tester la recherche
test_search() {
    log_info "Test de la recherche..."
    
    local response=$(curl -s -X POST "https://bmi.engage-360.net/api/search/semantic" \
        -H "Content-Type: application/json" \
        -d '{"query": "BMI", "k": 5, "min_score": 0.0}' 2>/dev/null || echo '{"error": "request failed"}')
    
    if echo "$response" | grep -q "results"; then
        log_success "‚úÖ Recherche fonctionnelle"
        echo "R√©ponse: $response" | jq '.' 2>/dev/null || echo "$response"
    else
        log_warning "‚ö†Ô∏è Recherche non fonctionnelle: $response"
    fi
}

# Nettoyer les ressources Docker
cleanup_docker() {
    log_info "Nettoyage des ressources Docker..."
    
    # Nettoyer les images non utilis√©es
    docker image prune -f
    
    # Nettoyer les conteneurs arr√™t√©s
    docker container prune -f
    
    # Nettoyer les volumes non utilis√©s
    docker volume prune -f
    
    log_success "Nettoyage termin√©"
}

# Fonction principale
main() {
    local mode=${1:-"update"}
    
    echo "üöÄ D√©ploiement BMI Chat - Mode: $mode"
    echo "========================================"
    
    # V√©rifier les pr√©requis
    check_prerequisites
    
    # Sauvegarder si demand√©
    if [ "$mode" = "backup" ]; then
        backup_data
        exit 0
    fi
    
    # Sauvegarder avant mise √† jour
    if [ "$mode" = "update" ]; then
        backup_data
    fi
    
    # Arr√™ter les services
    stop_services
    
    # Reconstruire les images
    build_images
    
    # D√©marrer les services
    start_services
    
    # Attendre que les services soient pr√™ts
    if ! wait_for_services; then
        log_error "√âchec du d√©marrage des services"
        exit 1
    fi
    
    # V√©rifier la sant√©
    if ! check_health; then
        log_error "√âchec de la v√©rification de sant√©"
        exit 1
    fi
    
    # Tester la recherche
    test_search
    
    # Nettoyer (optionnel)
    if [ "$mode" = "fresh" ]; then
        cleanup_docker
    fi
    
    log_success "üéâ D√©ploiement termin√© avec succ√®s!"
    echo ""
    echo "üìã R√©sum√©:"
    echo "  - Backend: http://localhost:3006"
    echo "  - Frontend: http://localhost:8095"
    echo "  - API Publique: https://bmi.engage-360.net"
    echo "  - Documentation: https://bmi.engage-360.net/docs"
    echo ""
    echo "üîç Commandes utiles:"
    echo "  - Logs backend: docker-compose logs -f backend"
    echo "  - Logs frontend: docker-compose logs -f frontend"
    echo "  - √âtat services: docker-compose ps"
    echo "  - Test recherche: curl -X POST https://bmi.engage-360.net/api/search/semantic -H 'Content-Type: application/json' -d '{\"query\": \"test\"}'"
}

# Gestion des arguments
case "${1:-update}" in
    "update")
        main "update"
        ;;
    "fresh")
        main "fresh"
        ;;
    "backup")
        main "backup"
        ;;
    *)
        echo "Usage: $0 [update|fresh|backup]"
        echo "  update: Mise √† jour avec sauvegarde (d√©faut)"
        echo "  fresh: D√©ploiement propre avec nettoyage"
        echo "  backup: Sauvegarde uniquement"
        exit 1
        ;;
esac 